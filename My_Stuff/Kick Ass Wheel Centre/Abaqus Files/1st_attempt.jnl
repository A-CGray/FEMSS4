# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep(
    'C:/Users/Ali/Documents/GrabCAD/2016-2017/Suspension/Wheel/Kick Ass Wheel Centre/Wheel Centre Blank.STEP'
    , scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='Wheel Centre Blank', type=
    DEFORMABLE_BODY)
# Save by Ali on 2016_11_10-16.10.31; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Aluminium')
mdb.models['Model-1'].materials['Aluminium'].Elastic(table=((70000000000.0, 
    0.33), ))
del mdb.models['Model-1'].parts['Wheel Centre Blank']
mdb.openStep(
    'C:/Users/Ali/Documents/GrabCAD/2016-2017/Suspension/Wheel/Kick Ass Wheel Centre/Wheel Centre Blank.STEP'
    , scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='Wheel Centre Blank', scale=0.001, 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].HomogeneousSolidSection(material='Aluminium', name=
    'Aluminium', thickness=None)
mdb.models['Model-1'].parts['Wheel Centre Blank'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Aluminium', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(cells=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='perimeter-holes')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#5ffff0 #7fffd ]', ), ), name='perimeter-holes')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#f #780000 ]', ), ), name='hub-holes')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#36000000 ]', ), ), name='hub-washers')
del mdb.models['Model-1'].parts['Wheel Centre Blank']
mdb.openStep(
    'C:/Users/Ali/Documents/GrabCAD/2016-2017/Suspension/Wheel/Kick Ass Wheel Centre/Wheel Centre Blank.STEP'
    , scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='Wheel Centre Blank', type=
    DEFORMABLE_BODY)
del mdb.models['Model-1'].parts['Wheel Centre Blank']
mdb.openStep(
    'C:/Users/Ali/Documents/GrabCAD/2016-2017/Suspension/Wheel/Kick Ass Wheel Centre/Wheel Centre Blank.STEP'
    , scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='Wheel Centre Blank', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#4 #0 #200 ]', ), ), name='hub-holes')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0 #6c000 ]', ), ), name='hub-washers')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0 #10000 ]', ), ), name='perimeter-wheel-interface')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0 #1000 ]', ), ), name='hub-interface')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#bfffe0 #ffd00000 #7f ]', ), ), name='perimeter-holes')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#f8000000 #fff #1000 ]', ), ), name='perimeter-washers')
mdb.models['Model-1'].parts['Wheel Centre Blank'].ignoreEntity(entities=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].vertices.getSequenceFromMask(
    ('[#0:3 #3 ]', ), ), 
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:3 #802 ]', ), )))
mdb.models['Model-1'].parts['Wheel Centre Blank'].ignoreEntity(entities=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].vertices.getSequenceFromMask(
    ('[#0:2 #f000000 ]', ), ), 
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:2 #a000000 ]', ), )))
mdb.models['Model-1'].parts['Wheel Centre Blank'].ignoreEntity(entities=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].vertices.getSequenceFromMask(
    ('[#f ]', ), ), 
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#a ]', ), )))
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=0.3)
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.0, -0.03))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=0.2, 
    textPoint=(0.0460604354739189, 0.000421684235334396))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Model-1'].parts['Part-2'].BaseWire(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].parts['Part-2']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=0.4)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.0, 0.06))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=0.2, 
    textPoint=(0.0859231352806091, 0.00028112530708313))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
# Save by Ali on 2016_11_10-16.50.02; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].parts['Part-2']
mdb.models['Model-1'].parts['Wheel Centre Blank'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Aluminium', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Wheel Centre Blank-1', part=
    mdb.models['Model-1'].parts['Wheel Centre Blank'])
# Save by Ali on 2016_11_10-17.05.15; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].edges[196], 
    CENTER))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].edges[195], 
    CENTER))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name=
    'perimeter-holes', side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#3ffff0 #1ffff800 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name=
    'perimeter washers', side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#ffc00000 #7f #2 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name='hub-interface', 
    side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0:2 #80 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name='hub-washers', 
    side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0 #780 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name='hub-holes', 
    side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#f #e0000000 #1 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].Surface(name=
    'perimeter-wheel-interface', side1Faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#0:2 #200 ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'rp2-perimeter-holes', surface=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].surfaces['perimeter-holes']
    , u1=ON, u2=ON, u3=OFF, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'rp2-perimeter-washers', surface=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].surfaces['perimeter washers']
    , u1=OFF, u2=OFF, u3=ON, ur1=ON, ur2=ON, ur3=OFF)
# Save by Ali on 2016_11_10-20.59.16; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].parts['Wheel Centre Blank'].Set(faces=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].faces.getSequenceFromMask(
    ('[#f #e0000000 #1 ]', ), ), name='hub-holes')
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'hob-holes', region=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].sets['hub-holes']
    , u1=0.0, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'hub-washers', region=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].sets['hub-washers']
    , u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].ConcentratedForce(cf3=100.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='axial', region=
    Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
mdb.models['Model-1'].Moment(cm3=10.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='torsion', region=
    Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
mdb.models['Model-1'].parts['Wheel Centre Blank'].PartitionCellBySweepEdge(
    cells=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[161], 
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[162]), sweepPath=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[67])
mdb.models['Model-1'].parts['Wheel Centre Blank'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[97], 
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[98]), line=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges[69], sense=REVERSE)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedPart(deviationFactor=0.02
    , minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].setMeshControls(elemShape=TET
    , regions=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Wheel Centre Blank'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh(boundaryPreview=
    ON)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].deleteMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedPart(deviationFactor=0.02
    , minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh(boundaryPreview=
    ON)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].deleteMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedPart(deviationFactor=0.02
    , minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=85)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), number=100)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#18 ]', ), ), number=77)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#18 ]', ), ), number=100)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:6 #80 ]', ), ), number=200)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh(boundaryPreview=
    ON)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:6 #20 ]', ), ), number=100)
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:6 #80 ]', ), ), size=2.0)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].parts['Wheel Centre Blank'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].edges.getSequenceFromMask(
    ('[#0:6 #80 ]', ), ), size=1.2)
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=THREADS, name='model-test', nodalOutputPrecision=SINGLE
    , numCpus=6, numDomains=6, numGPUs=0, queue=None, scratch='', type=ANALYSIS
    , userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_S,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T1_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_SN,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '720 nodes are missing degree of freedoms. The MPC/Equation/kinematic coupling constraints can not be formed. The nodes have been identified in node set ErrNodeMissingDofConstrDef.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '108 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
del mdb.models['Model-1'].constraints['rp2-perimeter-washers']
mdb.models['Model-1'].constraints['rp2-perimeter-holes'].setValues(u3=ON)
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_S,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T1_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_SN,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '108 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Geoff', 'handle': 12584, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 3841.86434841156})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 11 00:17:29 2016', 'jobName': 'model-test'})
mdb.models['Model-1'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[4], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'rp1-perimeter-washers', surface=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].surfaces['perimeter washers']
    , u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].loads['axial'].setValues(cf3=1000.0, distributionType=
    UNIFORM, field='', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[4], )))
mdb.models['Model-1'].loads['torsion'].setValues(cm3=1000.0, distributionType=
    UNIFORM, field='')
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_S,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T1_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_SN,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '720 nodes are used more than once as a slave node in *TIE keyword. These constraints are not removed either due to the presence of *CONSTRAINT CONTROLS,NO CHANGES keyword or because removing the constraints might affect the model. The nodes have been identified in node set ErrNodeOverconTieSlave.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '108 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.models['Model-1'].loads['axial'].setValues(distributionType=UNIFORM, field=
    '', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_S,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T1_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_SN,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '720 nodes are used more than once as a slave node in *TIE keyword. These constraints are not removed either due to the presence of *CONSTRAINT CONTROLS,NO CHANGES keyword or because removing the constraints might affect the model. The nodes have been identified in node set ErrNodeOverconTieSlave.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '108 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
del mdb.models['Model-1'].constraints['rp1-perimeter-washers']
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_S,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T1_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T1_Wheel Centre Blank-1_SN,ASSEMBLY__T1_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '108 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Geoff', 'handle': 1532, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 3841.86434841156})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 11 00:27:53 2016', 'jobName': 'model-test'})
mdb.models['Model-1'].materials['Aluminium'].elastic.setValues(table=((70000.0, 
    0.33), ))
mdb.models['Model-1'].loads['torsion'].setValues(cm3=10000.0, distributionType=
    UNIFORM, field='')
mdb.models['Model-1'].parts['Wheel Centre Blank'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].setMeshControls(elemShape=TET
    , regions=
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Wheel Centre Blank'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Wheel Centre Blank'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), ))
mdb.models['Model-1'].parts['Wheel Centre Blank'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].TopologyTask(freezeBoundaryConditionRegions=ON, name=
    'min-vol', region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].cells.getSequenceFromMask(
    mask=('[#5 ]', ), )))
mdb.models['Model-1'].optimizationTasks['min-vol'].SingleTermDesignResponse(
    drivingRegion=None, identifier='VOLUME', name='vol', operation=SUM, region=
    MODEL, stepOptions=())
mdb.models['Model-1'].optimizationTasks['min-vol'].SingleTermDesignResponse(
    drivingRegion=None, identifier='STRAIN_ENERGY', name='strain', operation=
    SUM, region=MODEL, stepOptions=())
mdb.models['Model-1'].optimizationTasks['min-vol'].ObjectiveFunction(name='vol'
    , objectives=((OFF, 'vol', 1.0, 0.0, ''), ))
mdb.models['Model-1'].optimizationTasks['min-vol'].OptimizationConstraint(
    designResponse='strain', name='maintain-strain', restrictionMethod=
    RELATIVE_LESS_THAN_EQUAL, restrictionValue=1.0)
mdb.models['Model-1'].optimizationTasks['min-vol'].TopologyPlanarSymmetry(axis=
    AXIS_1, csys=None, ignoreFrozenArea=False, name='x_sym', region=MODEL)
mdb.models['Model-1'].optimizationTasks['min-vol'].TopologyDemoldControl(
    collisionCheckRegion=DEMOLD_REGION, csys=None, draftAngle=0.0, name=
    'demold', pointRegion=None, pullDirection=(
    mdb.models['Model-1'].rootAssembly.referencePoints[4], 
    mdb.models['Model-1'].rootAssembly.referencePoints[5]), region=MODEL, 
    technique=AUTO)
mdb.models['Model-1'].optimizationTasks['min-vol'].TopologyRotationalSymmetry(
    angle=90.0, axis=AXIS_3, csys=None, ignoreFrozenArea=False, name='rot-sym', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].cells.getSequenceFromMask(
    mask=('[#5 ]', ), )))
mdb.OptimizationProcess(dataSaveFrequency=OPT_DATASAVE_EVERY_CYCLE, 
    description='', maxDesignCycle=50, model='Model-1', name='Opt-Process-1', 
    odbMergeFrequency=2, prototypeJob='Opt-Process-1-Job', task='min-vol')
mdb.optimizationProcesses['Opt-Process-1'].Job(atTime=None, 
    getMemoryFromAnalysis=True, memory=90, memoryUnits=PERCENTAGE, model=
    'Model-1', multiprocessingMode=DEFAULT, name='Opt-Process-1-Job', numCpus=6
    , numDomains=6, numGPUs=0, queue=None, waitHours=0, waitMinutes=0)
# Save by Ali on 2016_11_11-00.41.16; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.optimizationProcesses['Opt-Process-1']._Message(STARTED, {
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus/CAE Topology Optimization Module - version: Abaqus 6.13-1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting jobname: "Opt-Process-1"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM pre-processor', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO entry and the DV_TOPO entry', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  are assigned via the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO element group must be a subset of', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  the DV_TOPO element group, but some elements are missing.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Please add the missing elements to the DV_TOPO element group', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  or remove them from the DVCON_TOPO element group.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO name            : DEMOLD', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO element group   : ALL_ELEMENTS', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO name               : MIN-VOL_DESIGN_AREA_', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO element group      : _PICKEDSET13_ELEM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Number of missing elements :   228404', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  List   of missing elements :', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '   81181     -> 309584', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO entry and the DV_TOPO entry', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  are assigned via the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO element group must be a subset of', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  the DV_TOPO element group, but some elements are missing.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Please add the missing elements to the DV_TOPO element group', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  or remove them from the DVCON_TOPO element group.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO name            : X_SYM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO element group   : ALL_ELEMENTS', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO name               : MIN-VOL_DESIGN_AREA_', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO element group      : _PICKEDSET13_ELEM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Number of missing elements :   228404', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  List   of missing elements :', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '   81181     -> 309584', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Command will be ignored due to incorrect data.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPT_PARAM.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Item OPTIMIZE = MIN-VOL is not admitted.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Please ensure that the referenced OPTIMIZE entry is defined correctly.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPT_PARAM.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  The items of the command OPT_PARAM differ for shape or topology optimization.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Due to incorrect data further items cannot be analysed.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' The command will be ignored.', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Definition of the optimization task was not ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' successful because there are/is a command defintion', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' which returned an error or a serious warning.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Please check the listed command(s) in the table', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' below and check the ATOM.OUT file', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' for detailed information about the error(s).', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' To ensure that the optimization problem', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' found in the database is identical to the problem', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' intended by the user the optimization stops', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' until the errors and warnings are processed,', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' This means that all command definitions ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' have to be corrected.', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Table of failed commands:', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Command with the error            ID_NAME of command                     ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  OPTIMIZE                           MIN-VOL                            ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  OPT_PARAM                          MIN-VOL_OPT_PARAM_                 ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "Abaqus / ATOM.pre" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Abaqus / ATOM-preprocessor did not finish correctly. ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Module call: "C:/SIMULIA/Abaqus/6.13-1/code/bin/SMAExternal/ATOM/bin/atom_prep.CMD" --loglevel INFO < Opt-Process-1.par  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Return code: 0 ', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Optimization process failed with an error.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.models['Model-1'].optimizationTasks.changeKey(fromName='min-vol', toName=
    'min_vol')
#* Optimization process must refer to a valid task.
mdb.optimizationProcesses['Opt-Process-1'].setValues(maxDesignCycle=50, task=
    'min_vol')
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job'].setValues(
    )
mdb.optimizationProcesses['Opt-Process-1']._Message(STARTED, {
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus/CAE Topology Optimization Module - version: Abaqus 6.13-1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' The directory "Opt-Process-1" exists and will be deleted ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting jobname: "Opt-Process-1"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM pre-processor', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO entry and the DV_TOPO entry', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  are assigned via the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO element group must be a subset of', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  the DV_TOPO element group, but some elements are missing.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Please add the missing elements to the DV_TOPO element group', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  or remove them from the DVCON_TOPO element group.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO name            : DEMOLD', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO element group   : ALL_ELEMENTS', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO name               : MIN_VOL_DESIGN_AREA_', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO element group      : _PICKEDSET13_ELEM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Number of missing elements :   228404', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  List   of missing elements :', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '   81181     -> 309584', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO entry and the DV_TOPO entry', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  are assigned via the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  The DVCON_TOPO element group must be a subset of', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  the DV_TOPO element group, but some elements are missing.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Please add the missing elements to the DV_TOPO element group', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  or remove them from the DVCON_TOPO element group.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO name            : X_SYM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DVCON_TOPO element group   : ALL_ELEMENTS', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO name               : MIN_VOL_DESIGN_AREA_', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  DV_TOPO element group      : _PICKEDSET13_ELEM', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  Number of missing elements :   228404', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '  List   of missing elements :', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(WARNING, {
    'message': '   81181     -> 309584', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPTIMIZE.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Command will be ignored due to incorrect data.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPT_PARAM.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Item OPTIMIZE = MIN_VOL is not admitted.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Please ensure that the referenced OPTIMIZE entry is defined correctly.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Analysis of the command OPT_PARAM.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  The items of the command OPT_PARAM differ for shape or topology optimization.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Due to incorrect data further items cannot be analysed.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' The command will be ignored.', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Definition of the optimization task was not ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' successful because there are/is a command defintion', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' which returned an error or a serious warning.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Please check the listed command(s) in the table', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' below and check the ATOM.OUT file', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' for detailed information about the error(s).', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' To ensure that the optimization problem', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' found in the database is identical to the problem', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' intended by the user the optimization stops', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' until the errors and warnings are processed,', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' This means that all command definitions ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' have to be corrected.', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Table of failed commands:', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Command with the error            ID_NAME of command                     ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  OPTIMIZE                           MIN_VOL                            ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  OPT_PARAM                          MIN_VOL_OPT_PARAM_                 ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "Abaqus / ATOM.pre" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Abaqus / ATOM-preprocessor did not finish correctly. ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Module call: "C:/SIMULIA/Abaqus/6.13-1/code/bin/SMAExternal/ATOM/bin/atom_prep.CMD" --loglevel INFO < Opt-Process-1.par  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Return code: 0 ', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Optimization process failed with an error.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.models['Model-1'].optimizationTasks['min_vol'].setValues(region=MODEL)
mdb.optimizationProcesses['Opt-Process-1']._Message(STARTED, {
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus/CAE Topology Optimization Module - version: Abaqus 6.13-1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' The directory "Opt-Process-1" exists and will be deleted ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting jobname: "Opt-Process-1"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM pre-processor', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Abaqus / ATOM ended successfully', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(COMPLETED, {
    'time': 'Fri Nov 11 00:55:10 2016', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STARTED, {
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus/CAE Topology Optimization Module - version: Abaqus 6.13-1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' The directory "Opt-Process-1" exists and will be deleted ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting jobname: "Opt-Process-1"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM pre-processor', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 0', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 2292, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 01:04:09 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 0', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 828, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 01:24:35 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 2', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 1512, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 01:46:20 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 2', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 3', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 15104, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 02:04:52 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 3', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 4', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 13256, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 02:19:15 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 4', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 5', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12972, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 02:32:58 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 5', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 6', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11408, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 02:46:01 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 6', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 7', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11644, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 02:58:49 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 7', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 8', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 13636, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 03:12:44 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 8', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 9', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 10520, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 03:26:39 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 9', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 10', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12780, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 03:39:32 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 10', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 11', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 14744, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 03:52:39 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 11', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 12', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11804, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 04:06:08 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 12', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 13', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 10652, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 04:19:20 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 13', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 14', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 6704, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 04:32:25 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 14', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 15', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12716, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 04:45:15 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 15', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 16', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 14540, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 04:58:49 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 16', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 17', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 8092, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 05:11:48 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 17', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 18', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11796, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 05:24:39 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 18', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 19', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 13800, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 05:37:49 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 19', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 20', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 3008, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 05:50:54 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 20', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 21', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 3440, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 06:03:32 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 21', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 22', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 8400, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 06:16:25 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 22', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 23', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 13388, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 06:28:40 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 23', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 24', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 5712, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 06:41:13 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 24', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 25', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11480, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 06:53:33 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 25', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 26', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 1788, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 07:05:52 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 26', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 27', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 3576, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 07:18:42 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 27', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 28', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12828, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 07:31:09 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 28', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 29', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 14476, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 07:43:33 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 29', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 30', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12712, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 07:56:21 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 30', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 31', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 6832, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Fri Nov 11 08:08:44 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 31', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 32', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 1440, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9690.2318649292})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "FE-solver : abaqus" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Error occured during Analysis.  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  The following string could NOT be found in the solver output file ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  String : "THE ANALYSIS HAS BEEN COMPLETED" ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  File   : "Opt-Process-1-Job.msg" ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Please check the ERROR log files of the solver  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  for further information.  ', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "FE-solver : abaqus" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Error occured during optimization in "FE-solver : abaqus"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Module call: "C:/SIMULIA/Abaqus/6.13-1/code/bin/abq6131.exe" job=Opt-Process-1-Job analysis interactive message messaging_mechanism=DIRECT listener_name=Geoff listener_resource=5228 direct_port=65352 memory=90% cpus=6  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Return code: 1 ', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Please check the corresponding ERROR log Files ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Optimization process failed with an error.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.models['Model-1'].optimizationTasks['min_vol'].FrozenArea(name='frozen', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )))
mdb.models['Model-1'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[4], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'rp1-centre-hole', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].faces.getSequenceFromMask(
    mask=('[#0:2 #40 ]', ), )), u1=ON, u2=ON, u3=OFF, ur1=ON, ur2=ON, ur3=OFF)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'centre-hole', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[4], )), u1=0.0, u2=0.0, 
    u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by Ali on 2016_11_11-08.23.26; build 6.13-1 2013_05_16-03.28.56 126354
# Save by Ali on 2016_11_11-08.24.02; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].optimizationTasks['min_vol'].geometricRestrictions['rot-sym'].suppress(
    )
mdb.models['Model-1'].steps.changeKey(fromName='Step-1', toName='ACW-Torque')
mdb.models['Model-1'].StaticStep(name='CW-Torque', previous='ACW-Torque')
mdb.models['Model-1'].StaticStep(name='+Axial', previous='CW-Torque')
mdb.models['Model-1'].StaticStep(name='-Axial', previous='+Axial')
del mdb.models['Model-1'].loads['axial']
del mdb.models['Model-1'].loads['torsion']
mdb.models['Model-1'].Moment(cm3=100000.0, createStepName='ACW-Torque', 
    distributionType=UNIFORM, field='', localCsys=None, name='Torque', region=
    Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm3=-100000.0, stepName=
    'CW-Torque')
mdb.models['Model-1'].loads['Torque'].deactivate('+Axial')
mdb.models['Model-1'].ConcentratedForce(cf3=1000.0, createStepName='+Axial', 
    distributionType=UNIFORM, field='', localCsys=None, name='Axial', region=
    Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
mdb.models['Model-1'].loads['Axial'].setValuesInStep(cf3=-1000.0, stepName=
    '-Axial')
mdb.models['Model-1'].loads['Axial'].deactivate('-Axial')
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='-Axial', 
    distributionType=TOTAL_FORCE, field='', magnitude=1000.0, name='-Axial', 
    region=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].faces.getSequenceFromMask(
    mask=('[#0:2 #1000 ]', ), )))
mdb.models['Model-1'].boundaryConditions['hub-washers'].deactivate('-Axial')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='-Axial', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'hub-interface', region=
    mdb.models['Model-1'].rootAssembly.instances['Wheel Centre Blank-1'].sets['hub-interface']
    , u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by Ali on 2016_11_11-12.17.44; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Problem when parsing keyword: STEP     Invalid value "+Axial" for parameter "name". The value may be misspelled, obsolete, or invalid.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Problem when parsing keyword: STEP     Invalid value "-Axial" for parameter "name". The value may be misspelled, obsolete, or invalid.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *STATIC, file "model-test.inp", line 818576: The keyword is misplaced. It can be suboption for the following keyword(s)/level(s): step', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'model-test'})
mdb.models['Model-1'].steps.changeKey(fromName='+Axial', toName='pos-axial')
mdb.models['Model-1'].steps.changeKey(fromName='-Axial', toName='neg-axial')
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_S,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Geoff', 'handle': 9912, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 11 12:32:01 2016', 'jobName': 'model-test'})
# Save by Ali on 2016_11_11-13.12.09; build 6.13-1 2013_05_16-03.28.56 126354
# Save by Ali on 2016_11_11-14.13.23; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].loads['Torque'].setValues(cm3=400000.0, distributionType=
    UNIFORM, field='')
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm3=-400000.0, stepName=
    'CW-Torque')
mdb.models['Model-1'].StaticStep(name='y-torque', previous='neg-axial')
mdb.models['Model-1'].optimizationTasks['min_vol'].TopologyPlanarSymmetry(axis=
    AXIS_2, csys=None, ignoreFrozenArea=False, name='y-sym', region=MODEL)
mdb.models['Model-1'].StaticStep(name='x-torque', previous='y-torque')
mdb.models['Model-1'].Moment(cm2=10000.0, createStepName='y-torque', 
    distributionType=UNIFORM, field='', localCsys=None, name='y-torque', 
    region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[5], )))
del mdb.models['Model-1'].loads['y-torque']
mdb.models['Model-1'].loads['Torque'].reset('pos-axial')
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm3=0.0, stepName=
    'pos-axial')
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm2=10000.0, stepName=
    'y-torque')
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm1=10000.0, cm2=0.0, 
    stepName='x-torque')
mdb.models['Model-1'].StaticStep(name='xy-torque', previous='x-torque')
mdb.models['Model-1'].loads['Torque'].setValuesInStep(cm1=7071.0, cm2=7071.0, 
    stepName='xy-torque')
mdb.models['Model-1'].loads['-Axial'].deactivate('y-torque')
mdb.models['Model-1'].boundaryConditions['hub-washers'].reset('neg-axial')
mdb.models['Model-1'].boundaryConditions['hub-washers'].setValuesInStep(
    stepName='neg-axial', u3=FREED, ur3=0.0)
mdb.models['Model-1'].boundaryConditions['hub-washers'].setValuesInStep(
    stepName='y-torque', u3=0.0, ur3=FREED)
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_S,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Geoff', 'handle': 12516, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 4.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 5, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9460.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 5, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 5, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 5.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 6, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 6, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 6, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 6.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 7, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 7, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 7, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 11 23:58:34 2016', 'jobName': 'model-test'})
# Save by Ali on 2016_11_12-00.00.24; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.optimizationProcesses['Opt-Process-1'].setValues()
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job'].setValues(
    multiprocessingMode=THREADS, numCpus=7, numDomains=7)
# Save by Ali on 2016_11_12-00.13.55; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.optimizationProcesses['Opt-Process-1']._Message(STARTED, {
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus/CAE Topology Optimization Module - version: Abaqus 6.13-1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' The directory "Opt-Process-1" exists and will be deleted ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting jobname: "Opt-Process-1"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM pre-processor', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 0', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 5636, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 00:41:45 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 0', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 8648, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 01:35:41 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 1', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 2', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 12280, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 02:22:54 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 2', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 3', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 11168, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 03:12:02 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 3', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 4', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 6200, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 04:00:09 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 4', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 5', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 4004, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 04:47:32 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 5', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 6', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 10000, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 05:32:41 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 6', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 7', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'Geoff', 'handle': 6664, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 0.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 2, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 2.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 3, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 3.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 4, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 4.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 5, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 5.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9494.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 6, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 6.0, 'attempts': 0, 'timeIncrement': 1.0, 
    'increment': 0, 'stepTime': 0.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'Opt-Process-1-Job', 
    'memory': 9495.73221874237})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 'frame': 1, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STATUS, {'totalTime': 7.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 7, 'jobName': 'Opt-Process-1-Job', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': CALCULATOR_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': CALCULATOR_PHASE, 'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_COMPLETED, {'time': 'Sat Nov 12 06:19:43 2016', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus / ATOM optimization module - design cycle 7', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 8', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'Geoff', 'handle': 0, 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_S,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE _T0_Wheel_Centre_Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (_T0_Wheel_Centre_Blank-1_SN,_T0_Wheel_Centre_Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 1084 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 984 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\Opt-Process-1\\Opt-Process-1-Job.odb', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    ERROR, {
    'message': 'The executable pre.exe aborted with system error code 1073741819. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1'].jobs['Opt-Process-1-Job']._Message(
    JOB_ABORTED, {
    'message': 'The executable pre.exe aborted with system error code 1073741819. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'Opt-Process-1-Job'})
mdb.optimizationProcesses['Opt-Process-1']._archiveJob()
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "FE-solver : abaqus" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  The optimization system is searching for  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  check string "THE ANALYSIS HAS BEEN COMPLETED"   ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  in the checkfile "Opt-Process-1-Job.msg"  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {'message': '    ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  The checkfile "Opt-Process-1-Job.msg" could not be found ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' **** ERROR in Abaqus / ATOM - module "FE-solver : abaqus" **** ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Error occured during optimization in "FE-solver : abaqus"', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Module call: "C:/SIMULIA/Abaqus/6.13-1/code/bin/abq6131.exe" job=Opt-Process-1-Job analysis interactive message messaging_mechanism=DIRECT listener_name=Geoff listener_resource=10776 direct_port=54464 memory=90% cpus=7 mp_mode=THREADS  ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Return code: 1 ', 'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': '  Please check the corresponding ERROR log Files ', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': ' Logfile: Opt-Process-1\\atom.out', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Optimization process failed with an error.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
# Save by Ali on 2016_11_12-13.51.58; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['hub-washers'].deactivate('neg-axial')
mdb.models['Model-1'].BoundaryCondition(name='hub-washers-2', objectToCopy=
    mdb.models['Model-1'].boundaryConditions['hub-washers'], toStepName=
    'y-torque')
# Save by Ali on 2016_11_13-15.24.43; build 6.13-1 2013_05_16-03.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['model-test'].submit(consistencyChecking=OFF)
mdb.jobs['model-test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Geoff', 'handle': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'WHENEVER A TRANSLATION (ROTATION) DOF AT A NODE IS CONSTRAINED BY A KINEMATIC COUPLING DEFINITION THE TRANSLATION (ROTATION) DOFS FOR THAT NODE CANNOT BE INCLUDED IN ANY OTHER CONSTRAINT INCLUDING MPCS, RIGID BODIES, ETC.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_S,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY__T0_Wheel Centre Blank-1_SN IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IF SIGNIFICANT CLEARANCE/OVERCLOSURE EXISTS BETWEEN SURFACE PAIR (ASSEMBLY__T0_Wheel Centre Blank-1_SN,ASSEMBLY__T0_Wheel Centre Blank-1_M) AND THE MASTER SURFACE DOES NOT HAVE ROTATIONAL DEGREES OF FREEDOM, ADJUSTMENT IS RECOMMENDED FOR CORRECT ENFORCEMENT OF THE TIE CONSTRAINT', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'MPCS (EXTERNAL or INTERNAL, including those generated from rigid body definitions), KINEMATIC COUPLINGS, AND/OR EQUATIONS WILL ACTIVATE ADDITIONAL DEGREES OF FREEDOM', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5466 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 100 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\Temp\\model-test.odb', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'Geoff', 'handle': 2884, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9460.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 3.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 4, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 4.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 5, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 5, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 5, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 6, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 5.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 6, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 5, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 6, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 6, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 7, 
    'jobName': 'model-test'})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 
    'frame': 0, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 6.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 7, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['model-test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'model-test', 'memory': 9459.0258731842})
mdb.jobs['model-test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 6, 
    'frame': 1, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 7, 
    'jobName': 'model-test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['model-test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 7, 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'model-test'})
mdb.jobs['model-test']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 13 15:48:22 2016', 'jobName': 'model-test'})
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='hub-interface', 
    toName='hub-interface-2')
mdb.models['Model-1'].BoundaryCondition(name='hub-interface', objectToCopy=
    mdb.models['Model-1'].boundaryConditions['hub-interface-2'], toStepName=
    'ACW-Torque')
mdb.models['Model-1'].boundaryConditions['hub-interface'].deactivate(
    'pos-axial')
# Save by Ali on 2016_11_13-15.56.38; build 6.13-1 2013_05_16-03.28.56 126354
# Save by Ali on 2016_11_13-16.01.01; build 6.13-1 2013_05_16-03.28.56 126354
